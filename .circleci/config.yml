version: 2.1

# The section below specifies YAML anchors to create reusable configuration
# To Learn more about YAML anchors: https://blog.daemonl.com/2016/02/yaml.html

setup_workspace: &setup_workspace
  working_directory: ~/artsy/reaction
  docker:
    - image: circleci/node:8

# https://circleci.com/docs/2.0/caching/#basic-example-of-dependency-caching
save_cache: &save_cache
  save_cache:
    key: yarn-deps-{{ checksum "yarn.lock" }}
    paths:
      - ./node_modules

# https://circleci.com/docs/2.0/caching/#restoring-cache
restore_cache: &restore_cache
  restore_cache:
    keys:
      - yarn-deps-{{ checksum "yarn.lock" }}

# By default when yarn runs it does not check the filesystem to ensure the
# packages it expects to be installed are actually installed. Using the
# --check-files flag ensures that any packages or files missing or out of date
# on the file system (i.e. those which might be restored from cache) match what
# the yarn.lock file specifies
install_dependencies: &install_dependencies
  run: yarn

filter_master: &filter_master
  filters:
    branches:
      only:
        - master

jobs:
  relay:
    <<: *setup_workspace
    steps:
      - checkout
      - <<: *restore_cache
      - <<: *install_dependencies
      - run: yarn relay
  lint:
    <<: *setup_workspace
    steps:
      - checkout
      - <<: *restore_cache
      - <<: *install_dependencies
      - run: yarn lint
  type-check:
    <<: *setup_workspace
    steps:
      - checkout
      - <<: *restore_cache
      - <<: *install_dependencies
      - run: yarn type-check

  deploy:
    <<: *setup_workspace
    steps:
      # Note that the deploy job doesn't call install_dependencies. It's this
      # way for two reasons:
      #   1) It waits for the update-cache job to run so it's guarenteed that
      #      the cache will contain the packages needed for this deployment
      #      process. (i.e. there's not reason to run yarn install)
      #   2) When npm/yarn install runs it executes the pre and post install
      #      hooks of dependencies which means child packages could read any
      #      environment variables available. While this doesn't 100% protect
      #      us, it does reduce that attack surface. Note that this job is the
      #      _only_ job with the environment variables needed to publish thanks
      #      to the context being specified in the workflow.
      - checkout
      - <<: *restore_cache
      # Setup the .npmrc with the proper registry and auth token to publish
      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run: yarn semantic-release
  test:
    <<: *setup_workspace
    steps:
      - checkout
      - <<: *restore_cache
      - <<: *install_dependencies
      # Runs jest tests with 4 concurrent workers. Without limiting it to 4
      # workers Jest will spawn many memory hungry workers and ultimately
      # starve the job for memory.
      - run: yarn test -w 6
  update-cache:
    <<: *setup_workspace
    steps:
      - checkout
      - <<: *restore_cache
      - <<: *install_dependencies
      - <<: *save_cache
workflows:
  build_and_verify:
    jobs:
      - update-cache
      - relay
      - lint
      - type-check
      - test
      - deploy:
          # The deploy job is the _only_ job that should have access to our npm
          # tokens. We include a context that has our publish credentials
          # explicitly in this step. https://circleci.com/docs/2.0/contexts/
          context: npm-deploy
          <<: *filter_master
          requires:
            - test
            - relay
            - lint
            - type-check
            - update-cache
